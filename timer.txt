// Slomux — упрощённая, сломанная реализация Flux.
// Перед вами небольшое приложение, написанное на React + Slomux.
// Это нерабочий секундомер с настройкой интервала обновления.

// Исправьте ошибки и потенциально проблемный код, почините приложение и прокомментируйте своё решение.

// При нажатии на "старт" должен запускаться секундомер и через заданный интервал времени увеличивать свое значение на значение интервала
// При нажатии на "стоп" секундомер должен останавливаться и сбрасывать свое значение

 

ВЫПОЛНИЛ ТЕСТОВОЕ ЗАДАНИЕ: 

ИМПОРТЫ ДЛЯ VSC:

import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';

___________________________________________________________________________________
 const createStore = (reducer, initialState) => {
  let currentState = initialState
  const listeners = []

  const getState = () => currentState
  const dispatch = action => {
    currentState = reducer(currentState, action)
    listeners.forEach(listener => listener())
  }

  const subscribe = listener => listeners.push(listener)

  return { getState, dispatch, subscribe }
}

const connect = (mapStateToProps, mapDispatchToProps) =>
  Component => {
    class WrappedComponent extends React.Component {
      render() {
        return (
          <Component
            {...this.props}
            {...mapStateToProps(this.context.store.getState(), this.props)}
            {...mapDispatchToProps(this.context.store.dispatch, this.props)}
          />
        )
      }

      componentDidMount() {
        this.context.store.subscribe(this.handleChange)
      }

      handleChange = () => {
        this.forceUpdate()
      }
    }

    WrappedComponent.contextTypes = {
      store: PropTypes.object,
    }

    return WrappedComponent
  }

class Provider extends React.Component {
  getChildContext() {
    return {
      store: this.props.store,
    }
  }

  render() {
    return React.Children.only(this.props.children)
  }
}

Provider.childContextTypes = {
  store: PropTypes.object,
}

const CHANGE_INTERVAL = 'CHANGE_INTERVAL';
const CHANGE_BUTTON = 'CHANGE_BUTTON';

// action creators

const changeInterval = value => ({
  type: CHANGE_INTERVAL,
  payload: value,
})

const changeButton = value => ({
  type: CHANGE_BUTTON,
  payload: value,
})

// reducers

const reducer = (state, action) => {
  switch (action.type) {
    case CHANGE_INTERVAL:
      return {
        ...state,
        interval: action.payload,
      }
    case CHANGE_BUTTON:
      return {
        ...state,
        button: action.payload,
      }
    default:
      return state;
  }
}

// components

class IntervalComponent extends React.Component {

  state = {
    interval: 1,
    buttonBlock: false,
  }

  changeInterval = (value) => {
    const { interval } = this.state;
    if (interval === 1 && value === -1) {
      return;
    }
    this.setState({ interval: interval + value });
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.interval !== this.state.interval) {
      this.props.changeInterval(this.state.interval);
    }
  }

  render() {
    const { interval, buttonBlock } = this.state;
    const { buttonDisabled, currentInterval } = this.props;

    return (
      <div>
        <span>Интервал обновления секундомера: {interval} сек.</span>
        <span>
          <button
            onClick={() => this.changeInterval(-1)}
            disabled={interval === 1 || buttonDisabled}>-
          </button>
          <button
            onClick={() => this.changeInterval(1)}
            disabled={buttonDisabled}>+
          </button>
        </span>
      </div>
    )
  }
}

const Interval = connect(
  state => ({
    currentInterval: state.interval,
    buttonDisabled: state.button,
  }),
  dispatch => ({
    changeInterval: value => dispatch(changeInterval(value)),
  })
)(IntervalComponent);

class TimerComponent extends React.Component {

  state = {
    currentTime: 0,
    buttonBlock: false,
  }


  handleStart = () => {
    this.setState({ buttonBlock: true });
    this.props.changeButton(true);
    this.timerId= setInterval(() => this.setState({
      currentTime: (this.props.currentInterval || 1) + this.state.currentTime  
    }), (this.props.currentInterval || 1) * 1000)
  }

  handleStop = () => {
    clearInterval(this.timerId);
    this.props.changeButton(false);
    this.setState({
      currentTime: 0,
      buttonBlock: false,
    })
  }

  componentWillUnmount() {
    clearInterval(this.timerId);
  }

  render() {
    const { buttonBlock, currentTime } = this.state;
    return (
      <div>
        <Interval />
        <div>
          Секундомер: {currentTime} сек.
        </div>
        <div>
          <button onClick={this.handleStart} disabled={buttonBlock}>Старт</button>

          <button onClick={this.handleStop} disabled={!buttonBlock}>Стоп</button>
        </div>
      </div>
    )
  }
}

const Timer = connect(
  state => ({
    currentInterval: state.interval,
  }),
  dispatch => ({
    changeButton: value => dispatch(changeButton(value)),
  })
)(TimerComponent);

let defaultState = {
  interval: 1,
  button: true,
}

ReactDOM.render(
  <Provider store={createStore(reducer, defaultState = { defaultState })}>
    <Timer />
  </Provider>,
  document.getElementById('app')
))